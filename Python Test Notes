Test Review

if you are asked to return a lsit make a blank list (x = []) to add to the list used .append()

'{}'.format(x) You use the curly braces to put the variable into the string

to make a list 0 - 10  list(range(10)

use this is you have a list that you dont know the number of items good for representing size of a list

numbers = [0,1,2,3,4,5,6,7,8,9] 

for num in range(len(numbers)):
    print(num)

prints 0 - 9

the first "variable" in the dict is a pointer to the value

>>> numbers = { 'One':1, 'Two':2, 'Three':3, 'Four':4}
>>> x = numbers['Three']
>>> print(x)
3


------------------------------------------------------------------------------------------------------------------------------------------------


Practice Test
Q1 
TLO: 112-SCRPY002, LSA 3,4
  6     Given the floatstr, which is a comma separated string of
  7     floats, return a list with each of the floats in the 
  8     argument as elements in the list.
  9     '''
 10     x = []
 11 
 12     y = floatstr.split(',')
 13 
 14     for num in y:
 15         flt = float(num)
 16         x.append(flt)
 17 
 18     return x

Q2
	
'''
 24     TLO: 112-SCRPY006, LSA 3
 25     TLO: 112-SCRPY007, LSA 4
 26     Given the variable length argument list, return the average
 27     of all the arguments as a float
 28     '''
 29     x = 0
 30     for num in args:
 31         x += num
 32 
 33     ans = x / len(args)
 34 
 35     return ans

Q3

def q3(lst,n): #DONE
 42     '''
 43     TLO: 112-SCRPY004, LSA 3
 44     Given a list (lst) and a number of items (n), return a new 
 45     list containing the last n entries in lst.
 46     '''
 47     x = lst[-n:]
 48     return  x

Q4

def q4(strng): #DONE
 55     '''
 56     TLO: 112-SCRPY004, LSA 1,2
 57     TLO: 112-SCRPY006, LSA 3
 58     Given an input string, return a list containing the ordinal numbers of 
 59     each character in the string in the order found in the input string.
 60     '''
 61     x = []
 62 
 63     for elm in strng:
 64         x.append(ord(elm))
 65 
 66     return x

Q5

def q5(strng): #DONE
 72     '''
 73     TLO: 112-SCRPY002, LSA 1,3
 74     TLO: 112-SCRPY004, LSA 2
 75     Given an input string, return a tuple with each element in the tuple
 76     containing a single word from the input string in order.
 77     '''
 78 
 79     x = strng.split()
 80 
 81 
 82 
 83 
 84     return tuple(x)


Q6



Q7 

def q7(filename): #DONE
133     '''I
134     TLO: 112-SCRPY005, LSA 1
135     Given a filename, open the file and return the length of the first line 
136     in the file excluding the line terminator.
137     '''
138     with open(filename) as fp:
139         x = 0
140         for elm in fp.readlines(1):
141 
142             x += len(elm)
143 
144     return x - 1


Q8

 def q8(filename,lst): #DONE
149     '''
150     TLO: 112-SCRPY003, LSA 1
151     TLO: 112-SCRPY004, LSA 1,2
152     TLO: 112-SCRPY005, LSA 1
153     Given a filename and a list, write each entry from the list to the file
154     on separate lines until a case-insensitive entry of "stop" is found in 
155     the list. If "stop" is not found in the list, write the entire list to 
156     the file on separate lines.
157     '''
158     with open(filename, 'w') as fp:
159         for elm in lst:
160             if elm == 'stop' or elm == 'STOP':
161                 break
162             else:
163                 fp.write(elm + '\n')

	
Q9

def q9(miltime): #DONE
168     '''
169     TLO: 112-SCRPY003, LSA 1
170     Given the military time in the argument miltime, return a string 
171     containing the greeting of the day.
172     0300-1159 "Good Morning"
173     1200-1559 "Good Afternoon"
174     1600-2059 "Good Evening"
175     2100-0259 "Good Night"
176     '''
177     if miltime >= 300 and miltime <= 1159:
178         return "Good Morning"
179     elif miltime >= 1200 and miltime <= 1559:
180         return "Good Afternoon"
181     elif miltime >= 1600 and miltime <= 2059:
182         return "Good Evening"
183     elif miltime >= 2100 or miltime <= 259:
184         return "Good Night"
185     return
186     pass

Q10

def q10(numlist): #DONE
189     '''
190     TLO: 112-SCRPY003, LSA 1
191     TLO: 112-SCRPY004, LSA 1
192     Given the argument numlist as a list of numbers, return True if all 
193     numbers in the list are NOT negative. If any numbers in the list are
194     negative, return False.
195     '''
196     for elm in numlist:
197         if elm < 0:
198             return False
199 
200         return True
